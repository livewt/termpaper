digits = 1),
number = list(suffix = "%"),
type = "indicator",
mode = "gauge+number",
height = 200,
gauge = list(
axis = list(range = list(NULL, 100),
tickcolor = "dodgerblue",
ticksuffix = "%"),
bar = list(color = "dodgerblue"),
borderwidth = 1,
threshold = list(
line = list(color = "red", width = 2),
thickness = 1,
value = 5)))
roa =
roa %>%
layout(margin = list(l = 20, r = 30),
font = list(color = "dodgerblue"))
# Wages to sales ratio
wtos_when = c("Beginning of Year", "End of Year")
wtos_value = c(Open_wages_sale_inc*100,
Close_wages_sale_inc*100)
w_to_s =
data.frame(wtos_when,
wtos_value)
w_to_s$wtos_value = round(w_to_s$wtos_value,
digits = 2)
w_to_s_chart =
plot_ly(w_to_s,
x = c("Beginning of Year","End of Year"),
y = wtos_value,
type = "bar",
marker = list(color =
c("yellow","orange")),
opacity = 0.6,
height = 300)
mytext = c(round(Open_wages_sale_inc*100,
digits = 2),
round(Close_wages_sale_inc*100,
digits = 2))
mytext = paste(mytext,"%", sep = "")
w_to_s_chart =
w_to_s_chart %>%
add_annotations(text = mytext)
# Current ratio
current_chart =
plot_ly(
value = round(Close_Current_ratio,
digits = 3),
type = "indicator",
mode = "gauge+number+delta",
height = 200,
gauge = list(
axis = list(range = list(NULL, 2),
tickcolor = "black"),
bar = list(color = "black",
width = 1),
borderwidth = 1,
steps = list(
list(range = c(0,0.7), color = "red"),
list(range = c(0.7,1), color = "yellow"),
list(range = c(1, 2), color = "green"))),
delta = list(reference = round(Open_Current_ratio,
digits = 2)))
current_chart =
current_chart %>%
layout(margin = list(l = 20, r = 30),
font = list(color = "black"))
# Quick Ratio (Acid Test)
quick_chart =
plot_ly(
value = Close_Acid_test,
type = "indicator",
mode = "gauge+number+delta",
height = 200,
gauge = list(
axis = list(range = list(NULL,2),
tickcolor = "black"),
bar = list(color = "black",
width = 1),
borderwidth = 1,
steps = list(
list(range = c(0,0.7), color = "red"),
list(range = c(0.7,1), color = "yellow"),
list(range = c(1,2), color = "green"))),
delta = list(reference = round(Open_Acid_test,
digits = 2)))
quick_chart =
quick_chart %>%
layout(margin = list(l = 20, r = 30),
font = list(color = "black"))
# Gross profit
profit_when = c("Last Year", "This Year")
profit_value = as.numeric(c(Open_GrossProfit,
Close_GrossProfit))
profit =
data.frame(profit_when,
profit_value)
profit_chart =
plot_ly(profit,
x = c("Last Year", "This Year"),
y = profit_value,
type = "bar",
marker = list(color =
c("darkblue","dodgerblue")),
opacity = 0.6,
height = 300)
profit_text = as.character(format(profit$profit_value,
big.mark = ","))
profit_chart =
profit_chart %>%
add_annotations(text = profit_text)
# Operating Margin
operating_chart =
plot_ly(
type = "indicator",
mode = "number+gauge+delta",
value = round(Close_Operating_margin*100,
digits = 1),
delta = list(reference = round(Open_Operating_margin*100,
digits = 1),
ticksuffix = "%"),
gauge = list(
axis = list(range = list(NULL,100),
tickcolor = "purple",
ticksuffix = "%"),
bar = list(color = "purple",
width = 1),
borderwidth = 1,
steps = list(
list(range = c(4.7,5.3), color = "red"),
list(range = c(9.7,10.3), color = "yellow"),
list(range = c(19.7,20.3), color = "green"))),
height = 210,
number = list(suffix = "%"))
operating_chart =
operating_chart %>%
layout(margin = list(l = 20, r = 30),
font = list(color = "purple"))
# Gross Profit Margin
gross_percent_chart =
plot_ly(
type = "indicator",
mode = "number+gauge+delta",
value = round(Close_GrossProfit_percent*100,
digits = 3),
delta = list(reference = round(Open_GrossProfit_percent*100,
digits = 1),
ticksuffix = "%"),
gauge = list(
axis = list(range = list(NULL,100),
tickcolor = "navy",
ticksuffix = "%"),
bar = list(color = "navy",
width = 1),
borderwidth = 1,
steps = list(
list(range = c(4.7,5.3), color = "red"),
list(range = c(9.7,10.3), color = "yellow"),
list(range = c(19.7,20.3), color = "green"))),
height = 210,
number = list(suffix = "%"))
gross_percent_chart =
gross_percent_chart %>%
layout(margin = list(l = 20, r = 30),
font = list(color = "navy"))
# Higher_lower function for explaining purposes in the Shiny app:
# Inputs are opening ratio and closing ratio.
# Prints "higher than" if closing ratio is higher than opening ratio,
# "lower than" if opening ratio is higher than closing ratio,
# and "equal to" if closing ratio and opening ratio is the same.
higher_lower = function(open,close){
for(i in 1:length(c(open,close))){
if(open - close > 0){
solution = c("lower than")
break}
if(close - open > 0){
solution = c("higher than")
break}
else
solution = ("equal to what")
}
solution
}
#######################trans plot####
library(XML)
library(tidyverse)
library(taRifx)
library(bit64)
#for example 3yrs old
#choose_file <- choose.files(caption ="Select your SAF-T file (xml format)")
#main <- xmlParse(choose_file)
#main <- xmlParse("saf-t example (3yrs old).xml") #placeholder to skip choosing manually
#main <- (choose_file)
main_list <-
xmlToList(main) #making a list of the xml file
main_list <- xmlToList(main)
#as.data.frame(list[[3]][[4]][[4]])
journal <- main_list[[3]][[4]] %>% #extracting the journal information from the list
map_df(~as.data.frame(.)) #and making a df with map function
#test %>%
# select(Period, test[ ,grepl("Line.Amount", names(test))])
trans_sum <- journal[ ,grepl("Line.Amount", names(journal))] #making new df with all the different records (lines). This is dynamic so doesnt matter if max 7 or 4 records in the journal
trans_sum <- trans_sum %>%
map_df(as.numeric) #mapping the columns to numeric instead of chr
trans_sum[is.na(trans_sum)] <- 0 #and making NAs to 0s
#Now we have all transactions in trans_sum. Here they are recorded 2 times (credit and debit to different account).
#we want only the transcation counted 1 time, so to do this we simply sum the rows and divide by 2.
trans_sum <- trans_sum %>%
mutate(Sum = rowSums(.)) %>%
mutate(Amounts = Sum/2)
#then cbinding the new "amounts" column back to journal df.
journal <- cbind(journal, trans_sum$Amounts)
#making a new df with info used to plotting
plot_info <- journal%>%
select(Description, TransactionID,`trans_sum$Amounts`, TransactionDate)
#mva_test <- mva_test %>%
# drop_na(Line.TaxInformation.TaxType)
plot_info <- plot_info %>%
drop_na(TransactionID) #removes first 3 rows of journal, which always will be there(standarized xml structure)
#mva_test2 <- mva_test$`sum$Amounts` %>%
#  as.numeric()
#mva_test2 <- as.data.frame(mva_test2)
#mva_test2$mva_test22 <- mva_test2$mva_test2
#mva_test %>%
#  head
#For colouring purposes?
#wssplot <- function(data, nc=15, seed=1234){ #function found online!!!
#  wss <- (nrow(data)-1)*sum(apply(data,2,var))
#  for (i in 2:nc){
#    set.seed(seed)
#    wss[i] <- sum(kmeans(data, centers=i)$withinss)}
#  plot(1:nc, wss, type="b", xlab="Number of Clusters",
#       ylab="Within groups sum of squares")
#  wss
#}
#wssplot(mva_test2)
#cluster_amount <- as.numeric(readline(prompt = "How many clusters do you want? "))
#KM = kmeans(mva_test2, cluster_amount)
#KM$betweenss
#KM$centers
#cluster <- KM$cluster
#autoplot(KM,mva_test2, frame=TRUE)
#install.packages("ggiraph")
library(ggiraph)
#mva_test$cluster <- as.character(KM$cluster)
#mva_test$Line.Amount.1 <- as.numeric(mva_test$Line.Amount.1)
plot_info$TransactionID <- as.numeric(plot_info$TransactionID)
#tooltip_ <- c(paste0("Description: ", plot_info$Description,
#                     "\n Transaction ID: ", plot_info$TransactionID,
#                     "\n Amount: ", as.integer(plot_info$`trans_sum$Amounts`), " NOK")) #int to remove uneccesary deciamls in plot
#transaction_plot <- ggplot(data = plot_info) +
#  geom_point_interactive(aes(x = 1:length(`trans_sum$Amounts`), y = `trans_sum$Amounts`,
#                             tooltip = tooltip_, data_id = TransactionID))+
#  ylab("Amount")+
#  xlab("Transcation number")+
#  ggtitle("Hover over points to view description of the transcation")+
#  scale_x_continuous(labels = scales::comma)+
#  scale_y_continuous(labels = scales::comma)
#transaction_plot
#girafe(code = print(testplot))
#girafe(ggobj = transaction_plot)
plot_info$TransactionDate <- as.Date(plot_info$TransactionDate)
plot_info
#plot_info %>%
#  subset(.$TransactionDate> as.Date("2017-04-03"))
nrow(subset(plot_info, plot_info$TransactionDate>= "2017-03-15" & plot_info$TransactionDate <= "2017-03-15"))
#error plot
error_plot_df <- data.frame(matrix(nrow=1,ncol=1))
error_plot <- ggplot (data = error_plot_df)+
geom_text(aes(1,1),label="No transactions in given date- or monetary amount range", size=5)+
theme(text=element_text(size=200),
axis.title = element_blank(),
axis.text=element_blank())
#check if all transcations are included (53 in this case)
as.numeric(main_list[[3]][[1]]) == length(plot_info$`trans_sum$Amounts`)
#check if sum of transcations is right
sum(plot_info$`trans_sum$Amounts`)== as.numeric(main_list[[3]][[2]])
as.numeric(main_list[[3]][[3]]) == as.numeric(main_list[[3]][[2]])
#library(anytime)
#plot_info$TransactionDate <- anytime(plot_info$TransactionDate)
#max(plot_info$TransactionDate)
#length(plot_info$TransactionDate)
# Order given dataset by StandardAccountID and sum depending on credit/debit
# Sum by SAID - Debit
SumBySAIDDebit <- aggregate(main_df$ClosingDebitBalance - main_df$ClosingCreditBalance,
by=list(StandardAccountID=main_df$StandardAccountID),
FUN=sum)
SumBySAIDDebit$StandardAccountID <- as.numeric(SumBySAIDDebit$StandardAccountID)
# Sum by SAID - Credit
SumBySAIDCredit <- aggregate(main_df$ClosingCreditBalance - main_df$ClosingDebitBalance,
by=list(StandardAccountID=main_df$StandardAccountID),
FUN=sum)
SumBySAIDCredit$StandardAccountID <- as.numeric(SumBySAIDCredit$StandardAccountID)
# Sum by Account ID - Debit
SumByAIDDebit <- aggregate(main_df$ClosingDebitBalance - main_df$ClosingCreditBalance,
by=list(AccountID=main_df$AccountID),
FUN=sum)
SumByAIDDebit$AccountID <- as.numeric(SumByAIDDebit$AccountID)
# Sum by Account ID - Credit
SumByAIDCredit <- aggregate(main_df$ClosingCreditBalance - main_df$ClosingDebitBalance,
by=list(AccountID=main_df$AccountID),
FUN=sum)
SumByAIDCredit$AccountID <- as.numeric(SumByAIDCredit$AccountID)
# --------------------
# RESULTATREGNSKAP ETTER ART
# --------------------
`Resultatregnskap etter art` <- c('Salgsinntekt', 'Varekostnad', 'LÃ¸nnskostnad',
'Avskrivning', 'Nedskrivning',
'Annen driftskostnad', 'Finansinntekt',
'Finanskostnad',
'Skattekostnad pÃ¥ ordinÃ¦rt resultat',
'EkstraordinÃ¦r inntekt',
'EkstraordinÃ¦r kostnad',
'SKattekostnad pÃ¥ ekstraordinÃ¦rt resultat',
'Ãrsresultat', 'OverfÃ¸ringer/disponeringer')
SI <- as.numeric(sum(SumByAIDCredit[which(SumByAIDCredit[,1]>=3000 & SumByAIDCredit[,1]<=3970),2]))
VK <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=4000 & SumByAIDDebit[,1]<=4990),2]))
LK <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=5000 & SumByAIDDebit[,1]<=5930),2]))
Avskr <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=6000 & SumByAIDDebit[,1]<=6020),2]))
Nedskr <- as.numeric(subset(`SumByAIDCredit`, AccountID == 6050)[,2])
AnnenDK <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=6100 & SumByAIDDebit[,1]<=7910),2]))
FI <- as.numeric(sum(SumByAIDCredit[which(SumByAIDCredit[,1]>=8000 & SumByAIDCredit[,1]<=8080),2]))
FK <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=8100 & SumByAIDDebit[,1]<=8170),2]))
SKord <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=8300 & SumByAIDDebit[,1]<=8320),2]))
EkstraI <- as.numeric(sum(SumByAIDCredit[which(SumByAIDCredit[,1]>=8400 & SumByAIDCredit[,1]<=8499),2]))
EkstraK <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=8500 & SumByAIDDebit[,1]<=8599),2]))
SKekstra <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=8600 & SumByAIDDebit[,1]<=8620),2]))
Res <- as.numeric(subset(`SumByAIDCredit`, AccountID == 8800)[,2])
Disp <- as.numeric(sum(SumByAIDDebit[which(SumByAIDDebit[,1]>=8900 & SumByAIDDebit[,1]<=8990),2]))
Tall <- c(SI, VK, LK, Avskr, Nedskr, AnnenDK, FI, FK, SKord, EkstraI, EkstraK,
SKekstra, Res, Disp)
Resultatregnskap <- data.frame(`Resultatregnskap etter art`, Tall, check.names = 'false')
# --------------------
# EIENDELER
# --------------------
Eiendeler <- c('Immaterielle eiendeler o.l',
'Tomter, bygninger og annen fast eiendom',
'Transportmidler, inventar og maskiner o.l.',
'Finansielle anleggsmidler',
'Varelager og forskudd til leverandÃ¸rer',
'Kortsiktige fordringer',
'Merverdiavgift, opptjente offentlige tilskudd o.l.',
'Forskuddsbetalt kostnad, pÃ¥lÃ¸pt inntekt o.l.',
'Kortsiktige finansinvesteringer',
'Bankinnskudd, kontanter og lignende')
StandardAccountID <- c(10:19)
`Eiendeler tall` <- 0 # placeholder
BalanseEiendeler <- data.frame(Eiendeler, StandardAccountID,
`Eiendeler tall`, check.names = 'false')
# Get sum from SumBySAID and insert into BalanseEiendeler
setDT(BalanseEiendeler)[SumBySAIDDebit, `Eiendeler tall` := x, on = .(StandardAccountID)]
BalanseEiendeler$StandardAccountID <- NULL
# --------------------
# EGENKAPITAL OG GJELD
# --------------------
`Egenkapital og Gjeld` <- c('Egenkapital AS/ASA', 'Avsetning for forpliktelser',
'Annen langsiktig gjeld',
'Kortsiktige konvertible lÃ¥n, obligasjonslÃ¥n og gjeld til kredittinstitusjoner',
'LeverandÃ¸rgjeld', 'Betalbar skatt',
'Skattetrekk og andre trekk',
'Skyldige offentlige avgifter', 'Utbytte',
'Annen kortsiktig gjeld')
StandardAccountID <- c(20:29)
`EKGJ tall` <- 0 # placeholder
BalanseEKGJ <- data.frame(`Egenkapital og Gjeld`, StandardAccountID,
`EKGJ tall`, check.names = 'false')
# Get sum from SumBySAID and insert into BalanseEKGJ
setDT(BalanseEKGJ)[SumBySAIDCredit, `EKGJ tall` := x, on = .(StandardAccountID)]
BalanseEKGJ$StandardAccountID <- NULL
}
}
#vektor1 contais account IDS from SAF-T file
try(
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
, silent = T)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
try(
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
, silent =T)
vektor1 <- vektor1 %>% unique()
coltest <- c("AccountID", "AccountDescription", "StandardAccountID", "AccountType", "OpeningDebitBalance",
"ClosingDebitBalance", "OpeningCreditBalance", "ClosingCreditBalance")
truecols <- vector()
try(
for (i in 1:length(coltest)){
if (colnames(main_df)[i] == coltest[i]){
truecols <- c(truecols, TRUE)
} else {
truecols <- c(truecols, FALSE)
}
}
, silent = T)
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
library(shiny); runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
library(shiny); runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
library(shiny); runApp('shinydashboard_test.R')
library(shiny); runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
choose_file <- choose.files(caption ="Select your SAF-T file (xml format)")
#making DF from saf-t xml file
the_true_test <- FALSE
main <- FALSE
try(
main <- xmlParse(choose_file), silent = T)
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
main_df <- main_df %>%
replace(is.na(.), 0) #theres not always registered numbers on the nodes.
#removing "helping account"
try(
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
, silent=T)
#vektor1 contais account IDS from SAF-T file
try(
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
, silent = T)
vektor1 <- character()
try(
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
, silent =T)
vektor1 <- vektor1 %>% unique()
coltest <- c("AccountID", "AccountDescription", "StandardAccountID", "AccountType", "OpeningDebitBalance",
"ClosingDebitBalance", "OpeningCreditBalance", "ClosingCreditBalance")
truecols <- vector()
try(
for (i in 1:length(coltest)){
if (colnames(main_df)[i] == coltest[i]){
truecols <- c(truecols, TRUE)
} else {
truecols <- c(truecols, FALSE)
}
}
, silent = T)
std.acc.vector <- c("10", "11","12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "36", "37",
"38", "39", "40", "41", "42", "43", "45", "49", "50", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69",
"70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "83", "84", "85", "86", "88", "89")
std.acc.test <- std.acc.vector == vektor1
if (!FALSE %in% truecols & !FALSE %in% std.acc.test){
the_true_test <- TRUE
} else {
the_true_test <- FALSE
}
!FALSE %in% truecols
!FALSE %in% std.acc.test
std.acc.test
std.acc.test
truecols
truecols ==logical(0)
truecols >1
truecols != logical(0)
truecols
truecols == logical(0)
truecols == logical()
truecols == logical
truecols == logical(0L)
truecols == logical(0l)
truecols == logical(0L)
is.na(truecols)
is.logical(truecols)
!= is.logical(truecols)
truecols != is.logical(truecols
)
!is.logical(truecols)
if (!FALSE %in% truecols & !FALSE %in% std.acc.test & !is.logical(truecols) & is.logical(std.acc.test)){
the_true_test <- TRUE
} else {
the_true_test <- FALSE
}
the_true_test
runApp('shinydashboard_test.R')
library(shiny); runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
std.acc.vector
length(std.acc.vector)
length(coltest)
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
runApp('shinydashboard_test.R')
