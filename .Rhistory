if (accounts_unique[i] == vektor_STD[i]){
print("ja")
} else {
print("nei")
}
}
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (accounts_unique[i] == vektor_STD[i]){
print("ja")
} else {
print("nei")
}
}
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (accounts_unique[i] == vektor_STD[i]){
print("ja")
} else {
print("nei")
}
}
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (accounts_unique[i] %in% vektor_STD){
print("ja")
} else {
print("nei")
}
}
vektor2_STD <- character()
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (accounts_unique[i] %in% vektor_STD){
print("ja")
} else {
vektor2_STD <- c(vektor2_STD, accounts_unique[i])
}
}
accounts_unique
vektor2_STD
vektor_STD
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
#doing the same thing with StandardAccountIDs
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(dataframe$StandardAccountID) %>%
remove.factors(.)
vektor_STD <- character()
for (chr in dataframe_check_STD){
vektor_STD <- c(vektor_STD, chr)
}
vektor_STD <- vektor_STD %>% unique()
accounts_unique <- unique(STD_accounts_check_df$text)
vektor2_STD <- character()
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (vektor_STD[i] %in% accounts_unique){
print("ja")
} else {
vektor2_STD <- c(vektor2_STD, vektor_STD[i])
}
}
vektor2_STD
vektor3_STD <- character()
for (i in 1:length(accounts_unique)){
#ifelse(chr %in% STD_accounts_check_df$text, vektor2_STD <- c(vektor2_STD, chr),
#       vektor3_STD <- c(vektor3_STD, chr))
if (vektor_STD[i] %in% accounts_unique){
vektor3_STD <- c(vektor3_STD, vektor_STD[i])
} else {
vektor2_STD <- c(vektor2_STD, vektor_STD[i])
}
}
paste("The StandardAccountID", vektor3_STD, "is not in the skatteetaten spesification")
paste("The StandardAccountID", vektor2_STD, "is not in the skatteetaten spesification")
for (i in 1:length(accounts_unique)){
if (vektor_STD[i] %in% accounts_unique){
vektor3_STD <- c(vektor3_STD, vektor_STD[i])
} else {
vektor2_STD <- c(vektor2_STD, vektor_STD[i])
}
}
#making DF from saf-t xml file
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
#doing the same thing with StandardAccountIDs
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(dataframe$StandardAccountID) %>%
remove.factors(.)
vektor_STD <- character()
for (chr in dataframe_check_STD){
vektor_STD <- c(vektor_STD, chr)
}
vektor_STD <- vektor_STD %>% unique()
accounts_unique <- unique(STD_accounts_check_df$text)
vektor2_STD <- character()
vektor3_STD <- character()
for (i in 1:length(accounts_unique)){
if (vektor_STD[i] %in% accounts_unique){
vektor3_STD <- c(vektor3_STD, vektor_STD[i])
} else {
vektor2_STD <- c(vektor2_STD, vektor_STD[i])
}
}
#making DF from saf-t xml file
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
#doing the same thing with StandardAccountIDs
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(dataframe$StandardAccountID) %>%
remove.factors(.)
vektor_STD <- character()
for (chr in dataframe_check_STD){
vektor_STD <- c(vektor_STD, chr)
}
vektor_STD <- vektor_STD %>% unique()
accounts_unique <- unique(STD_accounts_check_df$text)
vektor2_STD <- character()
vektor3_STD <- character()
for (i in 1:length(accounts_unique)){
if (vektor_STD[i] %in% accounts_unique){
vektor3_STD <- c(vektor3_STD, vektor_STD[i])
} else {
#vektor2_STD <- c(vektor2_STD, vektor_STD[i])
print("error")
}
}
1:length(accounts_unique)
accounts_unique
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
View(dataframe)
dataframe$StandardAccountID
dataframe$StandardAccountID["NA"]
dataframe$StandardAccountID["89"]
dataframe$StandardAccountID[dataframe$StandardAccountID=="89"]
dataframe$StandardAccountID[dataframe$StandardAccountID=="89", ]
dataframe[dataframe$StandardAccountID=="89"]
dataframe[dataframe$StandardAccountID=="89", ]
dataframe[dataframe$StandardAccountID=="NA", ]
dataframe <- dataframe[-dataframe$StandardAccountID=="NA", ]
dataframe %>%
filter(StandardAccountID=="NA")
dataframe %>%
filter(StandardAccountID=="NA") %>%
row_number()
dataframe %>%
filter(StandardAccountID=="NA") %>%
row_number(.)
dataframe %>%
filter(StandardAccountID=="NA") %>%
row_number()
dataframe %>%
filter(StandardAccountID=="NA")
row_number(dataframe$StandardAccountID == "NA")
row_number()
?row_number
###
dataframe %>%
filter(StandardAccountID=="NA") %>%
n()
n()
?n()
###
dataframe %>%
filter(StandardAccountID=="NA")
###
dataframe %>%
filter(StandardAccountID=="NA") <- NULL
###
dataframe %>%
filter(StandardAccountID=="NA")
###
dataframe %>%
filter(StandardAccountID!="NA")
###
dataframe <-
filter(StandardAccountID!="NA")
###
dataframe <- dataframe %>%
filter(StandardAccountID!="NA")
View(dataframe)
View(dataframe)
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
View(dataframe)
###
dataframe <- dataframe %>%
filter(AccountDescription!="Hjelpekonto")
#doing the same thing with StandardAccountIDs
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(dataframe$StandardAccountID) %>%
remove.factors(.)
vektor_STD <- character()
for (chr in dataframe_check_STD){
vektor_STD <- c(vektor_STD, chr)
}
vektor_STD <- vektor_STD %>% unique()
accounts_unique <- unique(STD_accounts_check_df$text)
vektor2_STD <- character()
vektor3_STD <- character()
for (i in 1:length(accounts_unique)){
if (vektor_STD[i] %in% accounts_unique){
vektor3_STD <- c(vektor3_STD, vektor_STD[i])
} else {
#vektor2_STD <- c(vektor2_STD, vektor_STD[i])
print("error")
}
}
doc2 <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
dataframe <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
dataframe <- dataframe %>%
filter(AccountDescription!="Hjelpekonto")
#doing the same thing with StandardAccountIDs
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(dataframe$StandardAccountID) %>%
remove.factors(.)
vektor_STD <- character()
for (chr in dataframe_check_STD){
vektor_STD <- c(vektor_STD, chr)
}
vektor_STD <- vektor_STD %>% unique()
accounts_unique <- unique(STD_accounts_check_df$text)
vektor2_STD <- character()
for (i in 1:length(accounts_unique)){
if (vektor_STD[i] %in% accounts_unique){
vektor2_STD <- c(vektor2_STD, vektor_STD[i])
}
}
vektor2_STD == vektor_STD
if (vektor2_STD == vektor_STD){
print("ja")
}
for (i in 1:length(vektor_STD)){
if (vektor2_STD[i] == vektor_STD){
print("ja")
}
}
1:length(vektor_STD)
for (i in 1:length(vektor_STD)){
if (vektor2_STD[i] == vektor_STD[i]){
print("ja")
}
}
for (i in 1:length(vektor_STD)){
if (vektor2_STD[i] != vektor_STD[i]){
print("ja")
}
}
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(doc2)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main_df)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main_df)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(doc2, namespace))
###
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
###
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
vektor1 <- vektor_STD %>% unique()
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
#removing "helping account"
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
vektor1 <- vektor1 %>% unique()
library(XML)
library(tidyverse)
library(taRifx)
#making DF from saf-t xml file
main <- xmlParse("SAF-T new example2.xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
#removing "helping account"
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#Making sure all account IDS from specification by skatteetaten is in our data
#vektor1 contais account IDS from SAF-T file
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
vektor1 <- vektor1 %>% unique()
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
skatteetaten_unique <- unique(STD_accounts_check_df$text)
vektor2 <- character()
for (i in 1:length(skatteetaten_unique)){
if (vektor1[i] %in% skatteetaten_unique){
vektor2 <- c(vektor2, vektor1[i])
}
}
for (i in 1:length(vektor1){
if (vektor2[i] != vektor1[i]){
print("Your SAF-T file is not compatible with this program")
}
}
1:length(vektor1)
for (i in 1:length(vektor1)){
if (vektor2[i] != vektor1[i]){
print("Your SAF-T file is not compatible with this program")
}
}
View(main_df)
#making DF from saf-t xml file
main <- xmlParse("SAF-T Telenor 2019 (fictious)")
namespace <- xmlNamespaceDefinitions(main)[1]
#making DF from saf-t xml file
main <- xmlParse("SAF-T Telenor 2019 (fictious).xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
#removing "helping account"
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#vektor1 contais account IDS from SAF-T file
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
vektor1 <- vektor1 %>% unique()
#importing specification from skatteetaten
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
skatteetaten_unique <- unique(STD_accounts_check_df$text)
vektor2 <- character()
#adding IDs to vektor 2 if IDs from our data is in the specification by skatteetaten
for (i in 1:length(skatteetaten_unique)){
if (vektor1[i] %in% skatteetaten_unique){
vektor2 <- c(vektor2, vektor1[i])
}
}
#making sure IDs from our data is equal to the IDS by skatteetaten
#Giving error message if its not true
for (i in 1:length(vektor1)){
if (vektor2[i] != vektor1[i]){
print("Your SAF-T file is not compatible with this program")
}
}
View(main_df)
#making sure data is correct by asking user to verify 1 account:
main_df$AccountID
#making sure data is correct by asking user to verify 1 account:
main_df$AccountID["8800"]
#making sure data is correct by asking user to verify 1 account:
main_df %>%
select(AccountID, OpeningCreditBalance, ClosingCreditBalance)
#making sure data is correct by asking user to verify 1 account:
main_df %>%
select(AccountID, OpeningCreditBalance, ClosingCreditBalance) %>%
filter(AccountID = "8800")
#making sure data is correct by asking user to verify 1 account:
main_df %>%
filter(AccountID = "8800")
#making sure data is correct by asking user to verify 1 account:
main_df %>%
filter(AccountID == "8800")
##current ratio
main_df %>% subset(StandardAccountID == "10")
##current ratio
main_df %>% subset(StandardAccountID == c("10","11";"12"))
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(ClosingDebitBalance)
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(OpeningDebitBalance,ClosingDebitBalance)
View(main_df)
main_df %>% subset(StandardAccountID == c("10","11","12"))
main_df %>% subset(StandardAccountID == "11")
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(OpeningDebitBalance,ClosingDebitBalance)
main_df %>% subset(StandardAccountID == "11") %>%
summarise(OpeningDebitBalance, ClosingDebitBalance)
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(OpeningDebitBalance,ClosingDebitBalance)
main_df %>% subset(StandardAccountID == "10") %>%
summarise(OpeningDebitBalance, ClosingDebitBalance)
main_df %>% subset(StandardAccountID == "11") %>%
summarise(OpeningDebitBalance, ClosingDebitBalance)
?subset
##current ratio
main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(OpeningDebitBalance,ClosingDebitBalance)
##current ratio
test <- main_df %>% subset(StandardAccountID == c("10","11","12"))%>%
summarise(OpeningDebitBalance,ClosingDebitBalance)
View(test)
View(test)
