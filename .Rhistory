# as.integer64("") unexpectedly returns zero without warning.
# Overwrite this result to return NA without warning, similar to base as.integer("")
x[s==""] <- NA_integer64_
# as.integer64("ABC") unexpectedly returns zero without warning.
# Overwrite this result to return NA with same coercion warning as base as.integer("ABC")
bad_strings <- grepl('\\D',s) # thanks to @lukeA for the hint
if( any(bad_strings) ){
warning('NAs introduced by coercion')
x[bad_strings] <- NA_integer64_
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- as.integer64(s)
# as.integer64("") unexpectedly returns zero without warning.
# Overwrite this result to return NA without warning, similar to base as.integer("")
x[s==""] <- NA_integer64_
# as.integer64("ABC") unexpectedly returns zero without warning.
# Overwrite this result to return NA with same coercion warning as base as.integer("ABC")
bad_strings <- grepl('0.0',s) # thanks to @lukeA for the hint
if( any(bad_strings) ){
warning('NAs introduced by coercion')
x[bad_strings] <- as.integer()
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- as.integer64(s)
# as.integer64("") unexpectedly returns zero without warning.
# Overwrite this result to return NA without warning, similar to base as.integer("")
x[s==""] <- NA_integer64_
# as.integer64("ABC") unexpectedly returns zero without warning.
# Overwrite this result to return NA with same coercion warning as base as.integer("ABC")
bad_strings <- grepl('0.0',s) # thanks to @lukeA for the hint
if( any(bad_strings) ){
warning('NAs introduced by coercion')
x[bad_strings] <- 0
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- as.integer64(s)
# as.integer64("") unexpectedly returns zero without warning.
# Overwrite this result to return NA without warning, similar to base as.integer("")
x[s==""] <- NA_integer64_
# as.integer64("ABC") unexpectedly returns zero without warning.
# Overwrite this result to return NA with same coercion warning as base as.integer("ABC")
bad_strings <- "0.0" # thanks to @lukeA for the hint
if( any(bad_strings) ){
warning('NAs introduced by coercion')
x[bad_strings] <- 0
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
2
1
test <- main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
as.integer64("0")
charToInt64 <- function(s){
stopifnot( is.character(s) )
bad_strings <- "0.0"
if(any(bad_strings)){
x[bad_strings] <- 0
}
x <- as.integer64(s)
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
if (s == "0.0"){
s <- 0
}
x <- as.integer64(s)
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
#if (s == "0.0"){
# s <- 0
# }
x <- as.integer64(s)
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
if (s == "0.0"){
s <- "0"
}
x <- as.integer64(s)
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
if (s == "0.0"){
x <- as.integer(s)
} else {
x <- as.integer64(s)
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
?stopifnot
warnings()
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
if (i == "0.0"){
x <- as.integer(s)
} else {
x <- as.integer64(s)
}
}
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
if (i == "0.0"){
s <- as.integer(i)
} else {
s <- as.integer64(i)
}
}
x <- as.integer64(s)
x
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
if (s == "0.0")
x <- as.integer(s)
x
} else{
x <- as.integer64(s)
x
}
charToInt64 <- function(s){
stopifnot( is.character(s) )
if (s == "0.0"){
x <- as.integer(s)
x
} else{
x <- as.integer64(s)
x
}
}
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
testvektor <- c("0.0", "0", "10", "100")
charToInt64(testvektor)
testvektor <- c("0.0", "0", "10", "100", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
ifelse(s=="0.0", x<-as.integer(s), x<-as.integer64(s))
}
testvektor <- c("0.0", "0", "10", "100", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
ifelse(s=="0.0", x<-as.integer(s), x<-as.integer64(s))
x
}
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
ifelse(s=="0.0", x<-1, x<-as.integer64(s))
x
}
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
ifelse(s=="0.0", x<-as.integer(s), x<-as.integer(s))
x
}
charToInt64(testvektor)
?as.integer
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", x<-as.integer(s), x<-as.integer64(s))
}
x
}
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", t<-as.integer(s), x<-as.integer64(s))
}
x
t
}
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", t<-as.integer(s), x<-as.integer64(s))
}
x
}
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", t<-as.integer(s), x<-as.integer64(s))
}
x
}
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", t<-as.integer(s), x<-as.integer64(s))
}
x
}
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
for (i in s){
ifelse(s=="0.0", t<-as.integer(s), x<-as.integer64(s))
}
x
t
}
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- character()
for (i in s){
if (i == "0.0"){
x <- (x, as.integer(i))
}
else {
x <- (x, as.integer64(i))
}
}
x
}
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- character()
for (i in s){
if (i == "0.0"){
x <- c(x, as.integer(i))
} else {
x <- c(x, as.integer64(i))
}
}
x
}
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- character()
for (i in s){
if (i == "0.0"){
x <- c(x, "0")
} else {
x <- c(x, i)
}
}
x
}
charToInt64(testvektor)
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- character()
for (i in s){
if (i == "0.0"){
x <- c(x, "0")
} else {
x <- c(x, i)
}
}
x
}
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
#finally no bugs with numbers
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
main <- xmlParse("SAF-T Telenor 2019 (fictious).xml")
namespace <- xmlNamespaceDefinitions(main)[1]
namespace[[1]][1] == "nl"
namespace <- as.character(namespace[[1]][1])
namespace <- paste("//", namespace, sep = "", ":Account")
main_df <- xmlToDataFrame(nodes = getNodeSet(main, namespace))
#removing "helping account"
main_df <- main_df %>%
filter(AccountDescription!="Hjelpekonto")
#Making sure all account IDS from specification by skatteetaten is in our data
#vektor1 contais account IDS from SAF-T file
dataframe_check_STD <- data.frame(main_df$StandardAccountID) %>%
remove.factors(.)
vektor1 <- character()
for (chr in dataframe_check_STD){
vektor1 <- c(vektor1, chr)
}
vektor1 <- vektor1 %>% unique()
#importing specification from skatteetaten
STD_accounts_check <- xmlParse("General_Ledger_Standard_Accounts_2_character.xml")
STD_accounts_check_df <- xmlToDataFrame(nodes = getNodeSet(STD_accounts_check, "//AccountID")) %>%
remove.factors(.)
skatteetaten_unique <- unique(STD_accounts_check_df$text)
vektor2 <- character()
#adding IDs to vektor 2 if IDs from our data is in the specification by skatteetaten
for (i in 1:length(skatteetaten_unique)){
if (vektor1[i] %in% skatteetaten_unique){
vektor2 <- c(vektor2, vektor1[i])
}
}
#making sure IDs from our data is equal to the IDS by skatteetaten
#Giving error message if its not true
for (i in 1:length(vektor1)){
if (vektor2[i] != vektor1[i]){
print("Your SAF-T file is not compatible with this program")
}
}
#IDEA: making sure data is correct by asking user to verify accounts
######## Financial ratios #################
##current ratio
#problem that interger converts character "0.0" to NA's and base 32bit integer has
#restricted value of 2*10^9. Some numbers in this example file exceeds this
#made function to convert "0.0" to 32bit integer (gives 0 and not NA as 64bit integer)
#all other numbers uses integer 64
charToInt64 <- function(s){
stopifnot( is.character(s) )
x <- character()
for (i in s){
if (i == "0.0"){
x <- c(x, "0")
} else {
x <- c(x, i)
}
}
x
}
#test
testvektor <- c("0.0", "0", "10", "20000000000", "0.0")
charToInt64(testvektor)
main_df %>%
select(OpeningDebitBalance,
OpeningCreditBalance,
ClosingDebitBalance,
ClosingCreditBalance) %>%
transmute(charToInt64(OpeningDebitBalance),
charToInt64(OpeningCreditBalance),
charToInt64(ClosingDebitBalance),
charToInt64(ClosingCreditBalance)
)
